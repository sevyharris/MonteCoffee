.. _overview:
.. index:: Code overview


Code overview
*********************

We presented a general overview of :program:`MonteCoffee` in `M. Jørgensen and H. Grönbeck J. Chem. Phys. 149, 114101 (2018) <https://doi.org/10.1063/1.5046635>`_. In that article, we go through the general algorithm of kinetic Monte Carlo, and describe specifically how the code was designed.

What is kinetic Monte Carlo?
-----------------------------
Kinetic Monte Carlo (kMC) is a simulation technique that can be used to investigate the kinetics of chemical reactions.
Kinetics can be seen as transitions between different chemical states, which can be described by the chemical master equation:

.. math::
   :nowrap:

   \begin{equation}
      \dfrac{\text{d}P_\alpha}{\text{d}t}  =  \sum_\beta W_{\alpha\beta}P_\beta - W_{\beta\alpha}P_\alpha \\
   \end{equation}
   
where :math:`\alpha, \beta` are the states defined by the site-occupations (CO on site 1, CO on site 2, site 3 empty ,...) , :math:`W_\alpha\beta` is the transition rate from state :math:`\beta` to state :math:`\alpha`, and :math:`P_\alpha` is the probability for being in state :math:`P_\alpha`. The equation defines a system of coupled differential equations, with one equation for each :math:`\alpha`.

KMC solves this system of equations by randomly generating transitions between states. The transitions are generated by reactive events, which for example can be 
O2 dissociative adsorption on site number 1 and 3. The time of occurrence of a reactive event (i) is generated in :program:`MonteCoffee` by:

.. math::
   :nowrap:

   \begin{equation}
      t^\text{occ}_i  = t^\text{gen}_i-\dfrac{\text{ln}\,u}{k_i},\quad u \in [0,1[ \\
   \end{equation}

where :math:`t^\text{occ}_i` is the time of occurrence, :math:`t^\text{gen}_i` is the time the event was generated (simulation time), :math:`k_i` is the rate constant, and :math:`u` is a random uniform deviate. By generating the times of in this manner, :program:`MonteCoffee` implements the first reaction method, where the system is updated by continuously executing the event with the lowest :math:`t^\text{occ}`.


Structure of modules
---------------------
:program:`MonteCoffee` is written using `object-oriented <https://docs.python.org/3/tutorial/classes.html>`_ programming.
The central modlues are defined as shown in the figure below:

.. image:: _static/modules.png
   :width: 500


The modules each have their own responsibilities:
    - **Site**: Defines a catalytic site with properties.
    - **System**: Defined as a collection of catalytic sites.
    - **Events**: Defines the possible reactions in the system, and their rates.
    - **NeighborKMC**: Controls the actual run of the simulation.
    - **Basin**: Responsible for accelerating the Monte Carlo simulation based on rates in the superbasins. N. B., in the journal article `M. Jørgensen and H. Grönbeck J. Chem. Phys. 149, 114101 (2018) <https://doi.org/10.1063/1.5046635>`_ this module belonged to NeighborKMC, but it was separated for clarity.
    - **Logging**: Handles logging of simulation by receiving input from `NeighborKMC`.

In :program:`MonteCoffee` the site-connectivity is defined by each site's neighborlist. The set of neighborlists for all sites defines a global
connectivity pattern.

For more information about the classes, modules, and methods, please see :ref:`api`. The API is vital as :program:`MonteCoffee` is 
designed as a programmable application.



Implicit assumptions
---------------------

:program:`MonteCoffee` implicitly assumes a few things without specifying what they mean:

    - The user masters the concept of `object-oriented programming in Python  <https://docs.python.org/3/tutorial/classes.html>`_.
    - The chemical species are simply represented as integers. The user decides the meaning of each integer.
    - At most two sites are involved in binding adsorbates and reactions. (Coarse-grained sites are assumed).
    - Only sites that are in each others' neighbor-list are connected.
    - The event numbering is decided by the order of which the user loads the events (see the example in `test.py <api/NeighborKMC.html#module-NeighborKMC.test>`_).
    - The model implemented by the user is thermodynamically consistent, and detailed balance is obeyed by the events.
